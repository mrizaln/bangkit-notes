package com.dicoding.kotlin

class DataClassesAndCollections {
    // data class
        // simple class that can behave as a container
        // no logics or any functionalities except handling data
        // compiler will automatically construct a constructor, toString(), equals(), hashCode(), copy(), dan componentN()
        // some things to be aware of data class
        // 1. main constructor needs at least on e parameter
        // 2. all main constructor parameters need to be declared as val or var
        // 3. abstract, open, sealed, or inner modifier is illegal
    class User(val name: String, val age: Int)
    data class DataUser(val name: String, val age: Int) {
        fun intro(){
            println("MDfps8ryg[w4tr3flkdsjf $name r83fywan 3rf-y [on3 r3, adsf83 =r3 $age")
        }
    }

    fun dataClassVersusClass() {
        val user = User("maiuna", 22)
        val dataUser = DataUser("maiuna", 22)

        println(user)           // not so pretty
        println(dataUser)       // pretty print; toString() is autogenerated
    }

    fun destructuringDeclarations() {
        val dataUser = DataUser("rp38yda8v 3rp3 fdsapv4", 2387)
        dataUser.intro()

        val name = dataUser.component1()
        val age = dataUser.component2()
        println("My name is '$name', I am $age years old")

        // easier
        val (namee, agee) = dataUser
        println("My name is '$namee', I am $agee years old")
    }


    // collections
    fun collectionList() {
        // what makes List differ with Array (Array implemented as sequential memory segment, List???)
            // List is immutable as default
        val numberList: List<Int> = listOf(1, 2, 3, 4, 5, 6, 7)
        val anyList = listOf('a', "kotlin", 2UL, false)

        // mutable list
        val mutableAnyList = mutableListOf('d', "fedshadf", 43.23, false, DataUser("sdfoue", 1))
        println(mutableAnyList)
        mutableAnyList.add(23)
        mutableAnyList.add(3, 1.23233e-211)
        mutableAnyList.removeAt(1)
        println(mutableAnyList)
    }

    fun collectionSet() {
        // set of unique values
        val integerSet = setOf(1, 7, 2, 3, 1, 3, 2, 4, 5, 2, 5, 8, 3, 6, 9, 4, 8)
        val integerRange = 1..9
        val integerSett = integerRange.toSet()
        println(integerSet)
        println(integerSet == integerSett)

        val integerSettt = setOf(6,3,1,4,5,2,10)
        println(integerSett.intersect(integerSettt))
        println(integerSett.union(integerSettt))
    }

    fun collectionMap() {
        // key-value pair
        val capital = mapOf(
            "Jakarta" to "Indonesia",
            "London" to "England",
            "New Delhi" to "India",
        )
        println(capital)
        println(capital["London"])
        println(capital.getValue("Jakarta"))        // throwing function

        val mapKeys: Set<String> = capital.keys
        println(mapKeys)
        println(capital.values)
    }

    fun collectionOperations() {
        // filter() and filterNot()
        val numberList = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
        val evenList = numberList.filter { it % 2 == 0}
        println(evenList)

        val oddList = numberList.filterNot { it % 2 == 0 }
        println(oddList)

        // map() -> return new collection that is modified by lambda provided by us
        val multipliedBy5 = oddList.map { it * 5}
        println(multipliedBy5)

        // count()
        println(numberList.count { it % 3 == 0})

        // find(), firstOrNull(), lastOrNull()
        val firstOddNumber = numberList.find { it % 2 == 1}
        val firstOrNullNumber = numberList.firstOrNull { it % 2 == 3}
        val lastOrNullNumber = numberList.lastOrNull { it % 9 == 0}
        println(firstOddNumber)
        println(firstOrNullNumber)
        println(lastOrNullNumber)

        // first(), last()
        val firstNumber = numberList.first()
        val lastNumber = numberList.last()
        // val firstMoreThan10 = numberList.first { it > 10 }      // error: not found
        println(firstNumber)
        println(lastNumber)

        // sum()
        // sorted(), sortedDescending()
    }

    fun sequences() {
        // three last collections do an eager evaluation
        // sequence is a collection that is categorized as lazy evaluation
            // lazy evaluation will only evaluate values if it is really needed
        val list = (1..1000000).toList()
        // list.asSequence().filter{it % 5 == 0}.map{ it * 2}.forEach{ println(it) }       // too much to print

        val sequenceNumber = generateSequence(1){ it + 1}      // infinite sequence generator
        sequenceNumber.take(5).forEach{ print("$it ") }           // take only 5 sequences
        println()
    }

    fun main() {
        dataClassVersusClass()
        destructuringDeclarations()
        collectionList()
        collectionSet()
        collectionMap()
        collectionOperations()
        sequences()
    }
}