# ViewModel
    before
        UI controller
            - berfungsi untukm menampilkan data ke UI, memberi aksi terhadap tindakan pengguna atau menangani komunikasi sistem informasi seperti permintaan permission atau perizinan
            - memiliki kemampuan untuk mempertahankan data

    ## impelementasi ViewModel
        - membantu UI controller menyiapkan data yang akan ditampilkan ke UI
        - object ViewModel akan selalu dipertahankan selama ada configuration changes

    ## lifecycle dari ViewModel

        Activity created        [ onCreate ]        │
                                [ onStart  ]        │
                                [ onResume ]        │
        Activity rotated ────────────────────────── │ ViewModel
                                [ onPause  ]        │ Scope
                                 [ onStop ]         │
                               [ onDestroy  ]       │
                                                    │
                                [ onCreate ]        │
                                [ onStart  ]        │
                                [ onResume ]        │
            finish() ────────────────────────────── │
                                [ onPause  ]        │
                                 [ onStop ]         │
                               [ onDestroy  ]       │
            finished                                ▼
                                                onCleared()


    ## perbedaan ViewModel dengan savedInstanceState
        ┌──────────────────────┬──────────────────────────┬───────────────────────────┐
        │██████████████████████│ ViewModel                │ savedInstanceState        │
        ├──────────────────────┼──────────────────────────┼───────────────────────────┤
        │ storage              │ memory                   │ disk                      │
        ├──────────────────────┼──────────────────────────┼───────────────────────────┤
        │ bertahan dari        │                          │                           │
        │ configuration        │ ya                       │ ya                        │
        │ change               │                          │                           │
        ├──────────────────────┼──────────────────────────┼───────────────────────────┤
        │ bertahan dari        │                          │                           │
        │ proses mematikan     │ tidak                    │ ya                        │
        │ app yang dimulai     │                          │                           │
        │ dari sistem          │                          │                           │
        ├──────────────────────┼──────────────────────────┼───────────────────────────┤
        │ bertahan dari        │                          │                           │
        │ kesalahan aktivitas  │ tidak                    │ tidak                     │
        │ user atau onFinish() │                          │                           │
        ├──────────────────────┼──────────────────────────┼───────────────────────────┤
        │                      │ obyek kompleks baik saja │ hanya untuk tipe primitif │
        │ keterbatasan data    │ namun ruang dibatasi     │ dan object kecil dan      │
        │                      │ memory yang tersedia     │ sederhana                 │
        ├──────────────────────┼──────────────────────────┼───────────────────────────┤
        │ waktu read/write     │ cepat                    │ lambat                    │
        └──────────────────────┴──────────────────────────┴───────────────────────────┘

    ## links
        [https://developer.android.com/topic/libraries/architecture/viewmodel]



# Lifecycle
    komponen android.arch.lifecyle menyediakan kelas dan interface yang membantu anda mengatasi masalah mengelola banyak komponen di dalam metode Lifecycle sepert onStart() dan onStop()

    lifecycle memiliki fungsi untuk menyimpan informasi mengenai state dari komponen Lifecycle seperti Activity atau Fragment dan memungkinkan sebuah object untuk melakukan observasi perubahan keadaan dari sebuah Lifecycle

    ## komponen utama
        - event         dikirimkan dari sebuah Framework dan kelas Lifecycle
        - state         sebuah keadaan dari komponen yang dilacak dari object Lifecycle

        { states }
    [initialized]       [destroyed]     [created]       [started]       [resumed]
          │                  │              │               │               │
          │            ON_CREATE            │               │               │
          │────────────────────────────────▶│   ON_START    │               │
          │                  │              │─ ─ ─ ─ ─ ─ ─ ▶│   ON_RESUME   │
          │                  │              │               │─ ─ ─ ─ ─ ─ ─ ▶│
          │                  │ { events }   │               │               │
          │                  │              │               │   ON_PAUSE    │
          │                  │              │    ON_STOP    │◀ ─ ─ ─ ─ ─ ─ ─│
          │                  │  ON_DESTROY  │◀ ─ ─ ─ ─ ─ ─ ─│               │
          │                  │◀─ ─ ─ ─ ─ ─ ─│               │               │
          │                  │              │               │               │

    ## how
        suatu kelas dapat memonitor keadaan sebuah siklus dari komponen Lifecycle dengan menambahkan annotations ke metodenya
        kemudian anda bisa menambahkan sebuah observer dengan memanggil metode addObserver() dari kelas Lifecycle

        ``` (observer)
            class MyObserver : LifecycleObserver {
                @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)
                fun connectListener() {
                    ...
                }

                @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)
                fun disconnectListener() {
                    ...
                }
            }
        ```
        ``` (Activity)
            myLifecycleOwner.getLifecycle.addObserver(MyObserver())
        ```

    ## links
        [https://developer.android.com/topic/libraries/architecture/lifecycle]
