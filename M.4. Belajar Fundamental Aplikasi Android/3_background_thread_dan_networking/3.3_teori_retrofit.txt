# what
    library buatan Squate

    ``` (build.gradle)
        implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
        implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    ```

    honorable mention: Gson, json parser
        dll: https://github.com/square/retrofit/wiki/Converters



    interface ApiService {
        @GET("api/users")
        fun getListUsers(@Query("page") page: String): Call<ResponseUser>
    }

    val retrofit = Retrofit.Builder()
        .baseUrl("https://reqres.in/")
        .addConverterFactory(GsonConverterFactory.create())
        .build()
    val apiService = retrofit.create(ApiService::class.java)


# macam method dan annotation pada retrofit
    ``` kotlin
        //add information using Header
        @Headers("Authorization: token <Personal Access Token>")
        @GET("api/users")
        fun getListUsers(@Query("page") page: String): Call<ResponseUser>

        //get list user by id using path
        @GET("api/users/{id}")
        fun getUser(@Path("id") id: String): Call<ResponseUser>

        //post user using field x-www-form-urlencoded
        @FormUrlEncoded
        @POST("api/users")
        fun createUser(
            @Field("name") name: String,
            @Field("job") job: String
        ): Call<ResponseUser>

        //upload file using multipart
        @Multipart
        @PUT("api/uploadfile")
        fun updateUser(
            @Part("file") file: MultipartBody.Part,
            @PartMap data: Map<String, RequestBody>
        ): Call<ResponseUser>
    ```

    - @Headers          menambahkan informasi tambahan pada header
    - @Query            memasukkan parameter pada method @GET
    - @Path             memasukkan variable yang dapat diubah-ubah pada endpoint
    - @FormUrlEncoded   menandai fungsi pada @POST sebagai form-url-encoded
    - @Field            memasukkan parameter pada method @POST
    - @Multipat         menandai sebuah fungsi bahwa ia merupakan multi-part
    - @Part             mengirimkan file degnan cara multi-part
    - @PartMap          mengirimkan data lain selain file pada multi-part


# debug response dari retrofit
    ## logging interceptrot by OkHttp
        library tambahan yang print ke logcat

        ``` (build.gradle)
            implementation 'com.squareup.okhttp3:logging-interceptor:$loggingInterceptorVersion'
        ```

        ``` kotlin
            val loggingInterceptor =
                HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY)
            val client = OkHttpClient.Builder()
                .addInterceptor(loggingInterceptor)
                .build()
            val retrofit = Retrofit.Builder()
                .baseUrl("https://reqres.in/")
                .addConverterFactory(GsonConverterFactory.create())
                .client(client)
                .build()
        ```

    ## Chucker
        dapat menampilkan hasil response langsung pada device tanpa harus melihat logcat

        ``` (build.gradle)
            debugImplementation "com.github.chuckerteam.chucker:library:$chuckerVersion"
        ```

        ``` kotlin
            val client = OkHttpClient.Builder()
                .addInterceptor(ChuckerInterceptor(context))
                .build()
            val retrofit = Retrofit.Builder()
                .baseUrl("https://reqres.in/")
                .addConverterFactory(GsonConverterFactory.create())
                .client(client)
                .build()
        ```


# links
    retrofit:   https://square.github.io/retrofit/
    chucker:    https://github.com/ChuckerTeam/chucker
