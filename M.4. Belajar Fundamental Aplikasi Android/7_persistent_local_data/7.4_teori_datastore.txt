# what
    key-value storage                   preference DataStore     <<< fokus di sini
    protocol buffer data storage        proto DataStore

    menggunakan kotlin Coroutine dan Flow untuk menyimpan data secara async, konsisten, dan transaksional

    see also: [7.1_introduction.txt]


# Preferences DataStore vs Proto DataStore
    Preferences DataStore    ~   SharedPreferences

    Proto DataBuffers   ->  using protocol buffers     [https://developers.google.com/protocol-buffers]
                            lebih rumit
                            menggunakan scheme (???)

    ## when to use Preferences or Proto?
        Preferences: simple key-value, theme dark-mode, profile information
        ProtoBuf  : kompleks dan cepat diakses

        SharedPreferences:  in short it kinda deprecated?

    ## links about ProtoBuf
        [https://developer.android.com/topic/libraries/architecture/datastore#proto-datastore]
        [https://developers.google.com/protocol-buffers]
        [https://developer.android.com/codelabs/android-proto-datastore#0]


# implementasi Preferences DataStore
    perbedaan dengan SharedPreferences:
        - menangani pembaruan data secara transaksional
        - memperkenalkan Flow untuk mengirim pembaruan status data saat ini
        - tidak memiliki metode persistent data, seperti apply() dan commit()
        - menggunakan API yang mirip dengan Map dan MutableMap

    dependency
        ```(build.gradle)
            implementation "androidx.datastore:datastore-preferences:$versiterbaru"
        ```
            [https://developer.android.com/jetpack/androidx/releases/datastore]


# membuat instance Preferences DataStore
    agar lebih mudah untuk menjada DataStore, buatlah instance sebagai singleton
    cukup panggil sekali dalam project

    ```kotlin
        val Context.dataStore: DataStore<Preferences> by preferencesDataStore(name = "settings")
    ```


# mendefinisikan kata kunci Preferences DataStore
    ```kotlin
        val EXAMPLE_COUNTER = intPreferenceKey("example_counter")       // integer
    ```

    available keys:
        - intPreferenceKey
        - booleanPreferenceKey
        - doublePreferenceKey
        - floatPreferenceKey
        - longPreferenceKey
        - stringPreferenceKey
        - dll.


# mendapatkan nilai dari Preferences DataStore
    ```kotlin
        val exampleCounterFlow: Flow<Int> = context.datastore.data
            .map { preferences ->
                // no type safety
                preferences[EXAMPLE_COUNTER] ?: 0
            }
    ```


# meyimpan nilai dari Preferences DataStore
    ```kotlin
        suspend fun incrementCounter() {
            context.datastore.edit { settings ->
                // mendapatkan nilai
                val currentCounterValue = settings[EXAMPLE_COUNTER] ?: 0

                // mengubah nilai
                settings[EXAMPLE_COUNTER] = currentCounterValue + 1
            }
        }
    ```
