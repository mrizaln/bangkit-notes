# Inversion of Control (IoC)
    sebuah principle programming
    IoC bertindak sebagai invert flow control yang bertentangan dengan traditional flow control

    dalam traditional programming, kode yang reusable digunakan untuk memanggil atau menjalankan tugas umum.
    namun di IoC, kode-kode tersebut digunakan untuk menjalankan tugas yang lebih spesifik

    berkaitan dengan event-driven programming

    salah satu implementasi IoC adalah Dependency Injection


# what Dependency Injection
    sebuah teknik untuk menggunakan class lain tanpa perlu memikirkan bagaimana class tersebut dibuat, dimana satu object (or static method) memasok dependency object lain

    mendukung Dependency Inversion Principle (part of SOLID)

    SOLID
        - Single responsibility principle
        - Open/closed principle
        - Liskov substitution principle
        - Interface segregation principle
        - Dependency inversion principle

    "Dependency Inversion Principle is simply a guideline to write loosely-coupled code" (and high cohesion)


# manfaat menggunakan DI
    - membantu dalam unit testing
    - mengurangi kode yang boilerplate, karena inisialisi dependency dilakukan oleh komponen injektor
    - extending aplikasi menjadi lebih mudah
    - membantu mengaktifkan loose coupling
    - membantu saat ingin refactor kode


# service locator
    alternatif
    juga bisa mengurangi coupling antar class
    caranya yaitu dengan membuat class yang berisi dependency yang dibutuhkan kemudian memanggilnya di tempat yang anda butuhkan

    ```kotlin
        object ServiceLocator {
            fun getEngine(): Engine = Engine()
        }

        class Car {
            private val engine = ServiceLocator.getEngine()

            fun start() {
                engine.start()
            }
        }

        fun main() {
            val car = Car()
            car.start()
        }
    ```

    good read: [https://medium.com/mobile-app-development-publication/dependency-injection-and-service-locator-4dbe4559a3ba]


# komponen atau library yang sering digunakan
    - hilt      [https://developer.android.com/training/dependency-injection/hilt-android]
    - dagger    [https://square.github.io/dagger/]
    - koin      [https://insert-koin.io/]


# links
    [https://developer.android.com/training/dependency-injection]

    [https://developer.android.com/topic/libraries/architecture/livedata#merge_livedata]
    [https://medium.com/androiddevelopers/livedata-beyond-the-viewmodel-reactive-patterns-using-transformations-and-mediatorlivedata-fda520ba00b7]
    [https://medium.com/mobile-app-development-publication/understanding-live-data-made-simple-a820fcd7b4d0]

    [https://developer.android.com/topic/libraries/architecture/coroutines#livedata]
